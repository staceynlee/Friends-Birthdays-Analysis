par(bty = "u")
plot(lynx)
head(PlantGrowth)
PlantGrowthPlot = boxplot(data = PlantGrowth, extra ~ group, main = "Change in plant growth", ylab = "plant weight", xlab = "treatment")
?boxplot
x <- PlantGrowth$weight
y <- PlantGrowth$group
means <- by(x,y, mean)
means
boxplot(x-y, ylab = "plantweight", xlab = "treatment", main - "treatment effect on plant growth")
boxplot(x~y, ylab = "plantweight", xlab = "treatment", main - "treatment effect on plant growth")
boxplot(x~y, ylab = "plantweight", xlab = "treatment", main = "treatment effect on plant growth")
points(means, col="blue", pch=20)
points?
?points
?point
ourdata <- cars$speed
hist(lynx, breaks - 9, ylim = c(0,70))
hist(lynx, breaks = 9, ylim = c(0,70))
x = 1:5
y = rep(4,5)
x1 = 1.1:5.1
y1 = 5:1
x1
plot(x,y)
legend(2,3, legend=c("x"))
legend(1,3, legend=c("x"))
legend(1,3, legend=c("x"), bty = "n")
head(mtcars)
mean(mtcars$mpg)
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user )
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.uscs.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.uscs.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode = readLines(con)
> data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header = TRUE)
> file_name <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header = TRUE)
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
rscript --internet2 readlines.R
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
lines <- read.fwf(url, n=10)
lines <- read.fwf(url, n=10)
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
x <- readLines(con=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
url <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
lines <- readLines(url, n=10)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
packages <- c("data.table", "sqldf")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
library(httr)
require(httpuv)
require(jsonlite)
data <- read.csv("./getdata-wksst8110.for", header = TRUE)
data <- read.csv("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for", header = TRUE)
file_name <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[, 4])
library(dplyr)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
def compute(n,x,y):
if n == 0:
return x
return compute(n-1, x+y, y)
def compute(n,x,y){
if n == 0:
return x
return compute(n-1, x+y, y)
}
def compute(n,x,y) {
if n == 0:
return x
return compute(n-1, x+y, y)
}
compute = function(n,x,y) {
if n == 0:
return x
return compute(n-1, x+y, y)
}
compute = function(n,x,y) {
if n == 0:
return(x)
return(compute(n-1, x+y, y))
}
compute = function(n,x,y) {
if n == 0 {
return(x)
return(compute(n-1, x+y, y))
}
}
compute = function(n,x,y) {
if(n == 0) {
return(x)
return(compute(n-1, x+y, y))
}
}
compute(1,2,3)
x = compute(1,2,3)
x
DT = data.table(A = c(c, b, a), B = 1:6)
library(data.table)
DT = data.table(A = c(c, b, a), B = 1:6)
DT = data.table(A = c("c", "b", "a"), B = 1:6)
DT
ans = DT[, sum(B), by = A]
ans
ans[order(A)]
ans = DT[, sum(B), by = A][order(A)]
ans
x = c(cont, mchsp, mchspctd)
x = c("cont", "mchsp", "mchspctd")
y = c(26.08, 29.65, 35.07)
RStudio.Version()
install.packages("knitr")
install.packages("markdown")
library(knitr)
library(markdown)
swirl()
library(swirl)
install_in_swirl("Getting and Cleaning Data")
install_in_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
summarize(by_package, mean(size))
submit()
submit()
avg_bytes = mean(size))
countries =  n_distinct("country"),
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, 'count' > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc('count'))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, 'unique' > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submiy()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit
submit()
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1090 May 17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 1, minutes = 25, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(hours(17), minutes(34))
depart <- update(depart, hours(17), minutes(34))
update(depart, hours(17), minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(dplyr)
library(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights %>% select(carrier, flights)
flights %>% select(carrier, flight)
flights
cols <- c("carrier", "flight", "tailnum")
flights %>% select(one_of(cols))
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
library(MASS)
data()
data(mdeaths)
data("mdeaths")
data(lynx)
head(lynx)
?lynx
summary(lynx)
View(lynx)
library(dplyr)
lynxdf <- tbl_df(lynx)
lynxdf <- data.frame(lynx)
View(lynxdf)
lynxdf <- tbl_df(lynx)
class(lynxdf)
lynxdf <- tbl_df(lynxdf)
years <- (1821:1934)
lynxdfYears <- left_join(lynxdf, years)
lynxdfYears <- cbind(years, lynxdf)
View(lynxdfYears)
colNames(lynxdfYears) <- c("Year", "Lynx Trappings")
colnames(lynxdfYears) <- c("Year", "Lynx Trappings")
View(lynxdfYears)
library(ggplot2)
ggplot(lynxdfYears, aes(x = Year, y = Lynx Trappings))
ggplot(lynxdfYears)
qplot(x = Year, y = Lynx Trappings, data = lynxdfYears)
qplot(x = "Year", y = "Lynx Trappings", data = lynxdfYears)
ggplot(lynxdfYears, aes(x = "Year", y = "Lynx Trappings"))
ggplot(lynxdfYears) + geom_bar()
ggplot(lynxdfYears, aes(x = "Year")) + geom_bar()
View(lynxdfYears)
plot(lynxdfYears)
?plot
plot(lynxdfYears, type = "b", main = "Number of Lynx Trappings Per Year in Canada")
plot(lynxdfYears, type = "l", main = "Number of Lynx Trappings Per Year in Canada")
data(diamonds)
data("diamonds")
library(ggplot2)
data("diamonds")
summary(diamonds)
hist(diamonds$price)
summary(diamonds$price)
hist(diamonds$price, xlab = price)
hist(diamonds$price, xlab = "price")
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 1) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 500) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 250) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 250) +
facet_grid(price~cut) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 250) +
facet_wrap(cut) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut) +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
by(diamonds$prices, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price/carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
diamonds$price_per_carat <- diamonds$price / diamonds$carat
ggplot(data = diamonds, aes(x = price_per_carat) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + xlab('Price') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_continuous() + scale_x_log10() +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
scale_x_log10() +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = log10(price_per_carat)) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = log10(price_per_carat))) +
geom_histogram(binwidth = 250) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = log10(price_per_carat))) +
geom_histogram(binwidth = 600) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = log10(price_per_carat))) +
geom_histogram(binwidth = 0.5) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
ggplot(data = diamonds, aes(x = log10(price_per_carat))) +
geom_histogram(binwidth = 0.05) +
facet_wrap(~cut, scales = "free_y") +
xlab('Price per Carat') +
ylab('Frequency')
by(diamonds$price, diamonds$color, summary)
qplot(x = price, y = color, data = diamonds,
geom = 'boxplot') + coord_cartesian()
qplot(x = price, y = color, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 9000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 7000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 7500))
qplot(x = cut, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = clarity, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
by(diamonds$price, diamonds$color, summary)
qplot(x = color, y = price_per_carat, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0,6000))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.3))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
qplot(x = carat,
data = diamonds,
binwidth =0.1,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
#Load libraries and data
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("birthdaysExample.csv")
# How many people share your birthday?
my_birthday <- filter(df, grepl("8/8", dates))
nrow(my_birthday)
# Which month contains the most number of birthdays?
df <- separate(df, dates, into = c("month", "day", "year"), sep = "/")
df <- arrange(df, month, day)
ggplot(df) + geom_bar(aes(x = month)) + scale_x_discrete(limits = c(1,2,3,4,5,6,7,8,9,10,11,12)) +
scale_y_continuous() + xlab('Birth Month') +
ylab('Frequency')
# How many birthdays are in each month?
sort(table(df$month))
# Which day of the year has the most number of birthdays?
ggplot(df) + geom_bar(aes(x = day)) + scale_x_discrete(limits = c(1:31)) +
scale_y_continuous() + xlab('Birth Day') +
ylab('Frequency')
sort(table(df$day))
setwd("~/Desktop/GitHub/Friends-Birthdays-Analysis")
#Load libraries and data
library(ggplot2)
library(dplyr)
library(tidyr)
df <- read.csv("birthdaysExample.csv")
# How many people share your birthday?
my_birthday <- filter(df, grepl("8/8", dates))
nrow(my_birthday)
# Which month contains the most number of birthdays?
df <- separate(df, dates, into = c("month", "day", "year"), sep = "/")
df <- arrange(df, month, day)
ggplot(df) + geom_bar(aes(x = month)) + scale_x_discrete(limits = c(1,2,3,4,5,6,7,8,9,10,11,12)) +
scale_y_continuous() + xlab('Birth Month') +
ylab('Frequency')
# How many birthdays are in each month?
sort(table(df$month))
# Which day of the year has the most number of birthdays?
ggplot(df) + geom_bar(aes(x = day)) + scale_x_discrete(limits = c(1:31)) +
scale_y_continuous() + xlab('Birth Day') +
ylab('Frequency')
sort(table(df$day))
